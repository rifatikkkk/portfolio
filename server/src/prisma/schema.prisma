// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Video {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  description String?
  private     Boolean    @default(false)
  tags        TagVideo[]
  personId    String?    @db.ObjectId
  person      Person?    @relation(fields: [personId], references: [id])
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
}

model Tag {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  video     TagVideo[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model TagVideo {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  videoId String @db.ObjectId
  video   Video  @relation(fields: [videoId], references: [id])
  tagId   String @db.ObjectId
  tag     Tag    @relation(fields: [tagId], references: [id])
}

model Person {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  secretCode String
  videos     Video[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  password    String
  name        String    @unique
  private     Boolean   @default(false)
  avatarUrl   String?
  dateOfBirth DateTime?
  bio         String?
  location    String?
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String @db.ObjectId
}
